/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SubscriptionsRouteImport } from './routes/subscriptions'
import { Route as SettlementRouteImport } from './routes/settlement'
import { Route as PaymentsRouteImport } from './routes/payments'
import { Route as FaucetRouteImport } from './routes/faucet'
import { Route as BridgeRouteImport } from './routes/bridge'
import { Route as IndexRouteImport } from './routes/index'

const SubscriptionsRoute = SubscriptionsRouteImport.update({
  id: '/subscriptions',
  path: '/subscriptions',
  getParentRoute: () => rootRouteImport,
} as any)
const SettlementRoute = SettlementRouteImport.update({
  id: '/settlement',
  path: '/settlement',
  getParentRoute: () => rootRouteImport,
} as any)
const PaymentsRoute = PaymentsRouteImport.update({
  id: '/payments',
  path: '/payments',
  getParentRoute: () => rootRouteImport,
} as any)
const FaucetRoute = FaucetRouteImport.update({
  id: '/faucet',
  path: '/faucet',
  getParentRoute: () => rootRouteImport,
} as any)
const BridgeRoute = BridgeRouteImport.update({
  id: '/bridge',
  path: '/bridge',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/bridge': typeof BridgeRoute
  '/faucet': typeof FaucetRoute
  '/payments': typeof PaymentsRoute
  '/settlement': typeof SettlementRoute
  '/subscriptions': typeof SubscriptionsRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/bridge': typeof BridgeRoute
  '/faucet': typeof FaucetRoute
  '/payments': typeof PaymentsRoute
  '/settlement': typeof SettlementRoute
  '/subscriptions': typeof SubscriptionsRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/bridge': typeof BridgeRoute
  '/faucet': typeof FaucetRoute
  '/payments': typeof PaymentsRoute
  '/settlement': typeof SettlementRoute
  '/subscriptions': typeof SubscriptionsRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/bridge'
    | '/faucet'
    | '/payments'
    | '/settlement'
    | '/subscriptions'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/bridge'
    | '/faucet'
    | '/payments'
    | '/settlement'
    | '/subscriptions'
  id:
    | '__root__'
    | '/'
    | '/bridge'
    | '/faucet'
    | '/payments'
    | '/settlement'
    | '/subscriptions'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  BridgeRoute: typeof BridgeRoute
  FaucetRoute: typeof FaucetRoute
  PaymentsRoute: typeof PaymentsRoute
  SettlementRoute: typeof SettlementRoute
  SubscriptionsRoute: typeof SubscriptionsRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/subscriptions': {
      id: '/subscriptions'
      path: '/subscriptions'
      fullPath: '/subscriptions'
      preLoaderRoute: typeof SubscriptionsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settlement': {
      id: '/settlement'
      path: '/settlement'
      fullPath: '/settlement'
      preLoaderRoute: typeof SettlementRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/payments': {
      id: '/payments'
      path: '/payments'
      fullPath: '/payments'
      preLoaderRoute: typeof PaymentsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/faucet': {
      id: '/faucet'
      path: '/faucet'
      fullPath: '/faucet'
      preLoaderRoute: typeof FaucetRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/bridge': {
      id: '/bridge'
      path: '/bridge'
      fullPath: '/bridge'
      preLoaderRoute: typeof BridgeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BridgeRoute: BridgeRoute,
  FaucetRoute: FaucetRoute,
  PaymentsRoute: PaymentsRoute,
  SettlementRoute: SettlementRoute,
  SubscriptionsRoute: SubscriptionsRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
