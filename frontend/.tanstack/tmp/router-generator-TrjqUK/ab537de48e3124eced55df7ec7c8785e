/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TermsOfServiceRouteImport } from './routes/terms-of-service'
import { Route as SupportRouteImport } from './routes/support'
import { Route as SubscriptionsRouteImport } from './routes/subscriptions'
import { Route as SettlementRouteImport } from './routes/settlement'
import { Route as PrivacyPolicyRouteImport } from './routes/privacy-policy'
import { Route as PaymentsRouteImport } from './routes/payments'
import { Route as FaucetRouteImport } from './routes/faucet'
import { Route as DocumentationRouteImport } from './routes/documentation'
import { Route as CookiePolicyRouteImport } from './routes/cookie-policy'
import { Route as CommunityRouteImport } from './routes/community'
import { Route as BridgeRouteImport } from './routes/bridge'
import { Route as ApiReferenceRouteImport } from './routes/api-reference'
import { Route as IndexRouteImport } from './routes/index'

const TermsOfServiceRoute = TermsOfServiceRouteImport.update({
  id: '/terms-of-service',
  path: '/terms-of-service',
  getParentRoute: () => rootRouteImport,
} as any)
const SupportRoute = SupportRouteImport.update({
  id: '/support',
  path: '/support',
  getParentRoute: () => rootRouteImport,
} as any)
const SubscriptionsRoute = SubscriptionsRouteImport.update({
  id: '/subscriptions',
  path: '/subscriptions',
  getParentRoute: () => rootRouteImport,
} as any)
const SettlementRoute = SettlementRouteImport.update({
  id: '/settlement',
  path: '/settlement',
  getParentRoute: () => rootRouteImport,
} as any)
const PrivacyPolicyRoute = PrivacyPolicyRouteImport.update({
  id: '/privacy-policy',
  path: '/privacy-policy',
  getParentRoute: () => rootRouteImport,
} as any)
const PaymentsRoute = PaymentsRouteImport.update({
  id: '/payments',
  path: '/payments',
  getParentRoute: () => rootRouteImport,
} as any)
const FaucetRoute = FaucetRouteImport.update({
  id: '/faucet',
  path: '/faucet',
  getParentRoute: () => rootRouteImport,
} as any)
const DocumentationRoute = DocumentationRouteImport.update({
  id: '/documentation',
  path: '/documentation',
  getParentRoute: () => rootRouteImport,
} as any)
const CookiePolicyRoute = CookiePolicyRouteImport.update({
  id: '/cookie-policy',
  path: '/cookie-policy',
  getParentRoute: () => rootRouteImport,
} as any)
const CommunityRoute = CommunityRouteImport.update({
  id: '/community',
  path: '/community',
  getParentRoute: () => rootRouteImport,
} as any)
const BridgeRoute = BridgeRouteImport.update({
  id: '/bridge',
  path: '/bridge',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiReferenceRoute = ApiReferenceRouteImport.update({
  id: '/api-reference',
  path: '/api-reference',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/api-reference': typeof ApiReferenceRoute
  '/bridge': typeof BridgeRoute
  '/community': typeof CommunityRoute
  '/cookie-policy': typeof CookiePolicyRoute
  '/documentation': typeof DocumentationRoute
  '/faucet': typeof FaucetRoute
  '/payments': typeof PaymentsRoute
  '/privacy-policy': typeof PrivacyPolicyRoute
  '/settlement': typeof SettlementRoute
  '/subscriptions': typeof SubscriptionsRoute
  '/support': typeof SupportRoute
  '/terms-of-service': typeof TermsOfServiceRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/api-reference': typeof ApiReferenceRoute
  '/bridge': typeof BridgeRoute
  '/community': typeof CommunityRoute
  '/cookie-policy': typeof CookiePolicyRoute
  '/documentation': typeof DocumentationRoute
  '/faucet': typeof FaucetRoute
  '/payments': typeof PaymentsRoute
  '/privacy-policy': typeof PrivacyPolicyRoute
  '/settlement': typeof SettlementRoute
  '/subscriptions': typeof SubscriptionsRoute
  '/support': typeof SupportRoute
  '/terms-of-service': typeof TermsOfServiceRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/api-reference': typeof ApiReferenceRoute
  '/bridge': typeof BridgeRoute
  '/community': typeof CommunityRoute
  '/cookie-policy': typeof CookiePolicyRoute
  '/documentation': typeof DocumentationRoute
  '/faucet': typeof FaucetRoute
  '/payments': typeof PaymentsRoute
  '/privacy-policy': typeof PrivacyPolicyRoute
  '/settlement': typeof SettlementRoute
  '/subscriptions': typeof SubscriptionsRoute
  '/support': typeof SupportRoute
  '/terms-of-service': typeof TermsOfServiceRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/api-reference'
    | '/bridge'
    | '/community'
    | '/cookie-policy'
    | '/documentation'
    | '/faucet'
    | '/payments'
    | '/privacy-policy'
    | '/settlement'
    | '/subscriptions'
    | '/support'
    | '/terms-of-service'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/api-reference'
    | '/bridge'
    | '/community'
    | '/cookie-policy'
    | '/documentation'
    | '/faucet'
    | '/payments'
    | '/privacy-policy'
    | '/settlement'
    | '/subscriptions'
    | '/support'
    | '/terms-of-service'
  id:
    | '__root__'
    | '/'
    | '/api-reference'
    | '/bridge'
    | '/community'
    | '/cookie-policy'
    | '/documentation'
    | '/faucet'
    | '/payments'
    | '/privacy-policy'
    | '/settlement'
    | '/subscriptions'
    | '/support'
    | '/terms-of-service'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ApiReferenceRoute: typeof ApiReferenceRoute
  BridgeRoute: typeof BridgeRoute
  CommunityRoute: typeof CommunityRoute
  CookiePolicyRoute: typeof CookiePolicyRoute
  DocumentationRoute: typeof DocumentationRoute
  FaucetRoute: typeof FaucetRoute
  PaymentsRoute: typeof PaymentsRoute
  PrivacyPolicyRoute: typeof PrivacyPolicyRoute
  SettlementRoute: typeof SettlementRoute
  SubscriptionsRoute: typeof SubscriptionsRoute
  SupportRoute: typeof SupportRoute
  TermsOfServiceRoute: typeof TermsOfServiceRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/terms-of-service': {
      id: '/terms-of-service'
      path: '/terms-of-service'
      fullPath: '/terms-of-service'
      preLoaderRoute: typeof TermsOfServiceRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/support': {
      id: '/support'
      path: '/support'
      fullPath: '/support'
      preLoaderRoute: typeof SupportRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/subscriptions': {
      id: '/subscriptions'
      path: '/subscriptions'
      fullPath: '/subscriptions'
      preLoaderRoute: typeof SubscriptionsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settlement': {
      id: '/settlement'
      path: '/settlement'
      fullPath: '/settlement'
      preLoaderRoute: typeof SettlementRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/privacy-policy': {
      id: '/privacy-policy'
      path: '/privacy-policy'
      fullPath: '/privacy-policy'
      preLoaderRoute: typeof PrivacyPolicyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/payments': {
      id: '/payments'
      path: '/payments'
      fullPath: '/payments'
      preLoaderRoute: typeof PaymentsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/faucet': {
      id: '/faucet'
      path: '/faucet'
      fullPath: '/faucet'
      preLoaderRoute: typeof FaucetRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/documentation': {
      id: '/documentation'
      path: '/documentation'
      fullPath: '/documentation'
      preLoaderRoute: typeof DocumentationRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/cookie-policy': {
      id: '/cookie-policy'
      path: '/cookie-policy'
      fullPath: '/cookie-policy'
      preLoaderRoute: typeof CookiePolicyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/community': {
      id: '/community'
      path: '/community'
      fullPath: '/community'
      preLoaderRoute: typeof CommunityRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/bridge': {
      id: '/bridge'
      path: '/bridge'
      fullPath: '/bridge'
      preLoaderRoute: typeof BridgeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api-reference': {
      id: '/api-reference'
      path: '/api-reference'
      fullPath: '/api-reference'
      preLoaderRoute: typeof ApiReferenceRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ApiReferenceRoute: ApiReferenceRoute,
  BridgeRoute: BridgeRoute,
  CommunityRoute: CommunityRoute,
  CookiePolicyRoute: CookiePolicyRoute,
  DocumentationRoute: DocumentationRoute,
  FaucetRoute: FaucetRoute,
  PaymentsRoute: PaymentsRoute,
  PrivacyPolicyRoute: PrivacyPolicyRoute,
  SettlementRoute: SettlementRoute,
  SubscriptionsRoute: SubscriptionsRoute,
  SupportRoute: SupportRoute,
  TermsOfServiceRoute: TermsOfServiceRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
