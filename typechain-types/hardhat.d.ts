/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "TestERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestERC20__factory>;
    getContractFactory(
      name: "IOmniPayNotifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOmniPayNotifier__factory>;
    getContractFactory(
      name: "IPushCommInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPushCommInterface__factory>;
    getContractFactory(
      name: "OmniPayBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OmniPayBridge__factory>;
    getContractFactory(
      name: "OmniPayBridgeStub",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OmniPayBridgeStub__factory>;
    getContractFactory(
      name: "IOmniPayNotifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOmniPayNotifier__factory>;
    getContractFactory(
      name: "OmniPayCore",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OmniPayCore__factory>;
    getContractFactory(
      name: "IPUSHCommInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPUSHCommInterface__factory>;
    getContractFactory(
      name: "OmniPayNotifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OmniPayNotifier__factory>;
    getContractFactory(
      name: "IOmniPayNotifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOmniPayNotifier__factory>;
    getContractFactory(
      name: "OmniPaySettlement",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OmniPaySettlement__factory>;
    getContractFactory(
      name: "IOmniPayNotifierSub",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOmniPayNotifierSub__factory>;
    getContractFactory(
      name: "OmniPaySubscription",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OmniPaySubscription__factory>;

    getContractAt(
      name: "Ownable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "ERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20Permit",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "TestERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TestERC20>;
    getContractAt(
      name: "IOmniPayNotifier",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IOmniPayNotifier>;
    getContractAt(
      name: "IPushCommInterface",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IPushCommInterface>;
    getContractAt(
      name: "OmniPayBridge",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OmniPayBridge>;
    getContractAt(
      name: "OmniPayBridgeStub",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OmniPayBridgeStub>;
    getContractAt(
      name: "IOmniPayNotifier",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IOmniPayNotifier>;
    getContractAt(
      name: "OmniPayCore",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OmniPayCore>;
    getContractAt(
      name: "IPUSHCommInterface",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IPUSHCommInterface>;
    getContractAt(
      name: "OmniPayNotifier",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OmniPayNotifier>;
    getContractAt(
      name: "IOmniPayNotifier",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IOmniPayNotifier>;
    getContractAt(
      name: "OmniPaySettlement",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OmniPaySettlement>;
    getContractAt(
      name: "IOmniPayNotifierSub",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IOmniPayNotifierSub>;
    getContractAt(
      name: "OmniPaySubscription",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OmniPaySubscription>;

    deployContract(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Permit>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "TestERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestERC20>;
    deployContract(
      name: "IOmniPayNotifier",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOmniPayNotifier>;
    deployContract(
      name: "IPushCommInterface",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPushCommInterface>;
    deployContract(
      name: "OmniPayBridge",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OmniPayBridge>;
    deployContract(
      name: "OmniPayBridgeStub",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OmniPayBridgeStub>;
    deployContract(
      name: "IOmniPayNotifier",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOmniPayNotifier>;
    deployContract(
      name: "OmniPayCore",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OmniPayCore>;
    deployContract(
      name: "IPUSHCommInterface",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPUSHCommInterface>;
    deployContract(
      name: "OmniPayNotifier",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OmniPayNotifier>;
    deployContract(
      name: "IOmniPayNotifier",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOmniPayNotifier>;
    deployContract(
      name: "OmniPaySettlement",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OmniPaySettlement>;
    deployContract(
      name: "IOmniPayNotifierSub",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOmniPayNotifierSub>;
    deployContract(
      name: "OmniPaySubscription",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OmniPaySubscription>;

    deployContract(
      name: "Ownable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "ERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IERC20Metadata",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20Permit",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Permit>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "TestERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestERC20>;
    deployContract(
      name: "IOmniPayNotifier",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOmniPayNotifier>;
    deployContract(
      name: "IPushCommInterface",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPushCommInterface>;
    deployContract(
      name: "OmniPayBridge",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OmniPayBridge>;
    deployContract(
      name: "OmniPayBridgeStub",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OmniPayBridgeStub>;
    deployContract(
      name: "IOmniPayNotifier",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOmniPayNotifier>;
    deployContract(
      name: "OmniPayCore",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OmniPayCore>;
    deployContract(
      name: "IPUSHCommInterface",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPUSHCommInterface>;
    deployContract(
      name: "OmniPayNotifier",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OmniPayNotifier>;
    deployContract(
      name: "IOmniPayNotifier",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOmniPayNotifier>;
    deployContract(
      name: "OmniPaySettlement",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OmniPaySettlement>;
    deployContract(
      name: "IOmniPayNotifierSub",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOmniPayNotifierSub>;
    deployContract(
      name: "OmniPaySubscription",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OmniPaySubscription>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
