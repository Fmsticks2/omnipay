/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace OmniPayCore {
  export type TransactionStruct = {
    payer: AddressLike;
    payee: AddressLike;
    token: AddressLike;
    amount: BigNumberish;
    timestamp: BigNumberish;
    paymentRef: string;
  };

  export type TransactionStructOutput = [
    payer: string,
    payee: string,
    token: string,
    amount: bigint,
    timestamp: bigint,
    paymentRef: string
  ] & {
    payer: string;
    payee: string;
    token: string;
    amount: bigint;
    timestamp: bigint;
    paymentRef: string;
  };
}

export interface OmniPayCoreInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_PAYMENT_REF_LENGTH"
      | "getTransactions"
      | "notifier"
      | "owner"
      | "pause"
      | "paused"
      | "payERC20"
      | "payETH"
      | "renounceOwnership"
      | "setNotifier"
      | "transactionCount"
      | "transactions"
      | "transferOwnership"
      | "unpause"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "NotifierUpdated"
      | "OwnershipTransferred"
      | "Paused"
      | "PaymentCompleted"
      | "PaymentFailed"
      | "PaymentInitiated"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MAX_PAYMENT_REF_LENGTH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTransactions",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "notifier", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payERC20",
    values: [AddressLike, AddressLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "payETH",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setNotifier",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transactionCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transactions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "MAX_PAYMENT_REF_LENGTH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "notifier", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payERC20", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNotifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transactionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
}

export namespace NotifierUpdatedEvent {
  export type InputTuple = [oldNotifier: AddressLike, newNotifier: AddressLike];
  export type OutputTuple = [oldNotifier: string, newNotifier: string];
  export interface OutputObject {
    oldNotifier: string;
    newNotifier: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentCompletedEvent {
  export type InputTuple = [
    txId: BigNumberish,
    payer: AddressLike,
    payee: AddressLike,
    token: AddressLike,
    amount: BigNumberish,
    paymentRef: string
  ];
  export type OutputTuple = [
    txId: bigint,
    payer: string,
    payee: string,
    token: string,
    amount: bigint,
    paymentRef: string
  ];
  export interface OutputObject {
    txId: bigint;
    payer: string;
    payee: string;
    token: string;
    amount: bigint;
    paymentRef: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentFailedEvent {
  export type InputTuple = [
    payer: AddressLike,
    payee: AddressLike,
    token: AddressLike,
    amount: BigNumberish,
    paymentRef: string,
    reason: string
  ];
  export type OutputTuple = [
    payer: string,
    payee: string,
    token: string,
    amount: bigint,
    paymentRef: string,
    reason: string
  ];
  export interface OutputObject {
    payer: string;
    payee: string;
    token: string;
    amount: bigint;
    paymentRef: string;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentInitiatedEvent {
  export type InputTuple = [
    payer: AddressLike,
    payee: AddressLike,
    token: AddressLike,
    amount: BigNumberish,
    paymentRef: string
  ];
  export type OutputTuple = [
    payer: string,
    payee: string,
    token: string,
    amount: bigint,
    paymentRef: string
  ];
  export interface OutputObject {
    payer: string;
    payee: string;
    token: string;
    amount: bigint;
    paymentRef: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface OmniPayCore extends BaseContract {
  connect(runner?: ContractRunner | null): OmniPayCore;
  waitForDeployment(): Promise<this>;

  interface: OmniPayCoreInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_PAYMENT_REF_LENGTH: TypedContractMethod<[], [bigint], "view">;

  getTransactions: TypedContractMethod<
    [startIndex: BigNumberish, count: BigNumberish],
    [OmniPayCore.TransactionStructOutput[]],
    "view"
  >;

  notifier: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  payERC20: TypedContractMethod<
    [
      token: AddressLike,
      payee: AddressLike,
      amount: BigNumberish,
      paymentRef: string
    ],
    [void],
    "nonpayable"
  >;

  payETH: TypedContractMethod<
    [payee: AddressLike, paymentRef: string],
    [void],
    "payable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setNotifier: TypedContractMethod<
    [_notifier: AddressLike],
    [void],
    "nonpayable"
  >;

  transactionCount: TypedContractMethod<[], [bigint], "view">;

  transactions: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint, bigint, string] & {
        payer: string;
        payee: string;
        token: string;
        amount: bigint;
        timestamp: bigint;
        paymentRef: string;
      }
    ],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_PAYMENT_REF_LENGTH"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTransactions"
  ): TypedContractMethod<
    [startIndex: BigNumberish, count: BigNumberish],
    [OmniPayCore.TransactionStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "notifier"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "payERC20"
  ): TypedContractMethod<
    [
      token: AddressLike,
      payee: AddressLike,
      amount: BigNumberish,
      paymentRef: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "payETH"
  ): TypedContractMethod<
    [payee: AddressLike, paymentRef: string],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setNotifier"
  ): TypedContractMethod<[_notifier: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transactionCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transactions"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint, bigint, string] & {
        payer: string;
        payee: string;
        token: string;
        amount: bigint;
        timestamp: bigint;
        paymentRef: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "NotifierUpdated"
  ): TypedContractEvent<
    NotifierUpdatedEvent.InputTuple,
    NotifierUpdatedEvent.OutputTuple,
    NotifierUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "PaymentCompleted"
  ): TypedContractEvent<
    PaymentCompletedEvent.InputTuple,
    PaymentCompletedEvent.OutputTuple,
    PaymentCompletedEvent.OutputObject
  >;
  getEvent(
    key: "PaymentFailed"
  ): TypedContractEvent<
    PaymentFailedEvent.InputTuple,
    PaymentFailedEvent.OutputTuple,
    PaymentFailedEvent.OutputObject
  >;
  getEvent(
    key: "PaymentInitiated"
  ): TypedContractEvent<
    PaymentInitiatedEvent.InputTuple,
    PaymentInitiatedEvent.OutputTuple,
    PaymentInitiatedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "NotifierUpdated(address,address)": TypedContractEvent<
      NotifierUpdatedEvent.InputTuple,
      NotifierUpdatedEvent.OutputTuple,
      NotifierUpdatedEvent.OutputObject
    >;
    NotifierUpdated: TypedContractEvent<
      NotifierUpdatedEvent.InputTuple,
      NotifierUpdatedEvent.OutputTuple,
      NotifierUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "PaymentCompleted(uint256,address,address,address,uint256,string)": TypedContractEvent<
      PaymentCompletedEvent.InputTuple,
      PaymentCompletedEvent.OutputTuple,
      PaymentCompletedEvent.OutputObject
    >;
    PaymentCompleted: TypedContractEvent<
      PaymentCompletedEvent.InputTuple,
      PaymentCompletedEvent.OutputTuple,
      PaymentCompletedEvent.OutputObject
    >;

    "PaymentFailed(address,address,address,uint256,string,string)": TypedContractEvent<
      PaymentFailedEvent.InputTuple,
      PaymentFailedEvent.OutputTuple,
      PaymentFailedEvent.OutputObject
    >;
    PaymentFailed: TypedContractEvent<
      PaymentFailedEvent.InputTuple,
      PaymentFailedEvent.OutputTuple,
      PaymentFailedEvent.OutputObject
    >;

    "PaymentInitiated(address,address,address,uint256,string)": TypedContractEvent<
      PaymentInitiatedEvent.InputTuple,
      PaymentInitiatedEvent.OutputTuple,
      PaymentInitiatedEvent.OutputObject
    >;
    PaymentInitiated: TypedContractEvent<
      PaymentInitiatedEvent.InputTuple,
      PaymentInitiatedEvent.OutputTuple,
      PaymentInitiatedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
