/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface OmniPayBridgeStubInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "completeCrossChainPayment"
      | "initiateCrossChainPayment"
      | "owner"
      | "renounceOwnership"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CrossChainPaymentCompleted"
      | "CrossChainPaymentInitiated"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "completeCrossChainPayment",
    values: [
      BigNumberish,
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initiateCrossChainPayment",
    values: [
      BigNumberish,
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      string,
      string
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "completeCrossChainPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initiateCrossChainPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace CrossChainPaymentCompletedEvent {
  export type InputTuple = [
    localTxId: BigNumberish,
    payer: AddressLike,
    payee: AddressLike,
    token: AddressLike,
    amount: BigNumberish,
    sourceChain: string,
    paymentRef: string
  ];
  export type OutputTuple = [
    localTxId: bigint,
    payer: string,
    payee: string,
    token: string,
    amount: bigint,
    sourceChain: string,
    paymentRef: string
  ];
  export interface OutputObject {
    localTxId: bigint;
    payer: string;
    payee: string;
    token: string;
    amount: bigint;
    sourceChain: string;
    paymentRef: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CrossChainPaymentInitiatedEvent {
  export type InputTuple = [
    localTxId: BigNumberish,
    payer: AddressLike,
    payee: AddressLike,
    token: AddressLike,
    amount: BigNumberish,
    targetChain: string,
    paymentRef: string
  ];
  export type OutputTuple = [
    localTxId: bigint,
    payer: string,
    payee: string,
    token: string,
    amount: bigint,
    targetChain: string,
    paymentRef: string
  ];
  export interface OutputObject {
    localTxId: bigint;
    payer: string;
    payee: string;
    token: string;
    amount: bigint;
    targetChain: string;
    paymentRef: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface OmniPayBridgeStub extends BaseContract {
  connect(runner?: ContractRunner | null): OmniPayBridgeStub;
  waitForDeployment(): Promise<this>;

  interface: OmniPayBridgeStubInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  completeCrossChainPayment: TypedContractMethod<
    [
      localTxId: BigNumberish,
      payer: AddressLike,
      payee: AddressLike,
      token: AddressLike,
      amount: BigNumberish,
      sourceChain: string,
      paymentRef: string
    ],
    [void],
    "nonpayable"
  >;

  initiateCrossChainPayment: TypedContractMethod<
    [
      localTxId: BigNumberish,
      payer: AddressLike,
      payee: AddressLike,
      token: AddressLike,
      amount: BigNumberish,
      targetChain: string,
      paymentRef: string
    ],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "completeCrossChainPayment"
  ): TypedContractMethod<
    [
      localTxId: BigNumberish,
      payer: AddressLike,
      payee: AddressLike,
      token: AddressLike,
      amount: BigNumberish,
      sourceChain: string,
      paymentRef: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initiateCrossChainPayment"
  ): TypedContractMethod<
    [
      localTxId: BigNumberish,
      payer: AddressLike,
      payee: AddressLike,
      token: AddressLike,
      amount: BigNumberish,
      targetChain: string,
      paymentRef: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "CrossChainPaymentCompleted"
  ): TypedContractEvent<
    CrossChainPaymentCompletedEvent.InputTuple,
    CrossChainPaymentCompletedEvent.OutputTuple,
    CrossChainPaymentCompletedEvent.OutputObject
  >;
  getEvent(
    key: "CrossChainPaymentInitiated"
  ): TypedContractEvent<
    CrossChainPaymentInitiatedEvent.InputTuple,
    CrossChainPaymentInitiatedEvent.OutputTuple,
    CrossChainPaymentInitiatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "CrossChainPaymentCompleted(uint256,address,address,address,uint256,string,string)": TypedContractEvent<
      CrossChainPaymentCompletedEvent.InputTuple,
      CrossChainPaymentCompletedEvent.OutputTuple,
      CrossChainPaymentCompletedEvent.OutputObject
    >;
    CrossChainPaymentCompleted: TypedContractEvent<
      CrossChainPaymentCompletedEvent.InputTuple,
      CrossChainPaymentCompletedEvent.OutputTuple,
      CrossChainPaymentCompletedEvent.OutputObject
    >;

    "CrossChainPaymentInitiated(uint256,address,address,address,uint256,string,string)": TypedContractEvent<
      CrossChainPaymentInitiatedEvent.InputTuple,
      CrossChainPaymentInitiatedEvent.OutputTuple,
      CrossChainPaymentInitiatedEvent.OutputObject
    >;
    CrossChainPaymentInitiated: TypedContractEvent<
      CrossChainPaymentInitiatedEvent.InputTuple,
      CrossChainPaymentInitiatedEvent.OutputTuple,
      CrossChainPaymentInitiatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
