/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface OmniPayNotifierInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "NOTIFIER_ROLE"
      | "channel"
      | "getRoleAdmin"
      | "grantNotifierRole"
      | "grantRole"
      | "hasRole"
      | "notifyBeforeRenewal"
      | "notifyPaymentFailure"
      | "notifyPaymentSuccess"
      | "notifySubscriptionCancelled"
      | "notifySubscriptionExecuted"
      | "owner"
      | "pushComm"
      | "pushEnabled"
      | "renounceOwnership"
      | "renounceRole"
      | "revokeNotifierRole"
      | "revokeRole"
      | "sendBulkNotification"
      | "sendCustomNotification"
      | "setChannel"
      | "setPushComm"
      | "setPushEnabled"
      | "supportsInterface"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BeforeRenewal"
      | "CustomNotification"
      | "NotifierConfigured"
      | "OwnershipTransferred"
      | "PaymentFailure"
      | "PaymentSuccess"
      | "PushAttempt"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "SubscriptionCancelled"
      | "SubscriptionExecuted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "NOTIFIER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "channel", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantNotifierRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "notifyBeforeRenewal",
    values: [BigNumberish, AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "notifyPaymentFailure",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "notifyPaymentSuccess",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "notifySubscriptionCancelled",
    values: [BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "notifySubscriptionExecuted",
    values: [
      BigNumberish,
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pushComm", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pushEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeNotifierRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sendBulkNotification",
    values: [AddressLike[], string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "sendCustomNotification",
    values: [AddressLike, string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setChannel",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPushComm",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPushEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "NOTIFIER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "channel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantNotifierRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "notifyBeforeRenewal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "notifyPaymentFailure",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "notifyPaymentSuccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "notifySubscriptionCancelled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "notifySubscriptionExecuted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pushComm", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pushEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeNotifierRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sendBulkNotification",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendCustomNotification",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setChannel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPushComm",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPushEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace BeforeRenewalEvent {
  export type InputTuple = [
    subId: BigNumberish,
    subscriber: AddressLike,
    merchant: AddressLike,
    amount: BigNumberish,
    nextPaymentDue: BigNumberish
  ];
  export type OutputTuple = [
    subId: bigint,
    subscriber: string,
    merchant: string,
    amount: bigint,
    nextPaymentDue: bigint
  ];
  export interface OutputObject {
    subId: bigint;
    subscriber: string;
    merchant: string;
    amount: bigint;
    nextPaymentDue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CustomNotificationEvent {
  export type InputTuple = [
    recipient: AddressLike,
    title: string,
    body: string,
    metadata: BytesLike
  ];
  export type OutputTuple = [
    recipient: string,
    title: string,
    body: string,
    metadata: string
  ];
  export interface OutputObject {
    recipient: string;
    title: string;
    body: string;
    metadata: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NotifierConfiguredEvent {
  export type InputTuple = [
    pushComm: AddressLike,
    channel: AddressLike,
    pushEnabled: boolean
  ];
  export type OutputTuple = [
    pushComm: string,
    channel: string,
    pushEnabled: boolean
  ];
  export interface OutputObject {
    pushComm: string;
    channel: string;
    pushEnabled: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentFailureEvent {
  export type InputTuple = [
    payer: AddressLike,
    payee: AddressLike,
    token: AddressLike,
    amount: BigNumberish,
    paymentRef: string,
    reason: string
  ];
  export type OutputTuple = [
    payer: string,
    payee: string,
    token: string,
    amount: bigint,
    paymentRef: string,
    reason: string
  ];
  export interface OutputObject {
    payer: string;
    payee: string;
    token: string;
    amount: bigint;
    paymentRef: string;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentSuccessEvent {
  export type InputTuple = [
    payer: AddressLike,
    payee: AddressLike,
    token: AddressLike,
    amount: BigNumberish,
    paymentRef: string
  ];
  export type OutputTuple = [
    payer: string,
    payee: string,
    token: string,
    amount: bigint,
    paymentRef: string
  ];
  export interface OutputObject {
    payer: string;
    payee: string;
    token: string;
    amount: bigint;
    paymentRef: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PushAttemptEvent {
  export type InputTuple = [
    recipient: AddressLike,
    notificationType: BigNumberish,
    success: boolean,
    identity: BytesLike
  ];
  export type OutputTuple = [
    recipient: string,
    notificationType: bigint,
    success: boolean,
    identity: string
  ];
  export interface OutputObject {
    recipient: string;
    notificationType: bigint;
    success: boolean;
    identity: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubscriptionCancelledEvent {
  export type InputTuple = [
    subId: BigNumberish,
    subscriber: AddressLike,
    merchant: AddressLike
  ];
  export type OutputTuple = [
    subId: bigint,
    subscriber: string,
    merchant: string
  ];
  export interface OutputObject {
    subId: bigint;
    subscriber: string;
    merchant: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubscriptionExecutedEvent {
  export type InputTuple = [
    subId: BigNumberish,
    subscriber: AddressLike,
    merchant: AddressLike,
    token: AddressLike,
    amount: BigNumberish,
    nextPaymentDue: BigNumberish
  ];
  export type OutputTuple = [
    subId: bigint,
    subscriber: string,
    merchant: string,
    token: string,
    amount: bigint,
    nextPaymentDue: bigint
  ];
  export interface OutputObject {
    subId: bigint;
    subscriber: string;
    merchant: string;
    token: string;
    amount: bigint;
    nextPaymentDue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface OmniPayNotifier extends BaseContract {
  connect(runner?: ContractRunner | null): OmniPayNotifier;
  waitForDeployment(): Promise<this>;

  interface: OmniPayNotifierInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  NOTIFIER_ROLE: TypedContractMethod<[], [string], "view">;

  channel: TypedContractMethod<[], [string], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantNotifierRole: TypedContractMethod<
    [notifier: AddressLike],
    [void],
    "nonpayable"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  notifyBeforeRenewal: TypedContractMethod<
    [
      subId: BigNumberish,
      subscriber: AddressLike,
      merchant: AddressLike,
      amount: BigNumberish,
      nextPaymentDue: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  notifyPaymentFailure: TypedContractMethod<
    [
      payer: AddressLike,
      payee: AddressLike,
      token: AddressLike,
      amount: BigNumberish,
      paymentRef: string,
      reason: string
    ],
    [void],
    "nonpayable"
  >;

  notifyPaymentSuccess: TypedContractMethod<
    [
      payer: AddressLike,
      payee: AddressLike,
      token: AddressLike,
      amount: BigNumberish,
      paymentRef: string
    ],
    [void],
    "nonpayable"
  >;

  notifySubscriptionCancelled: TypedContractMethod<
    [subId: BigNumberish, subscriber: AddressLike, merchant: AddressLike],
    [void],
    "nonpayable"
  >;

  notifySubscriptionExecuted: TypedContractMethod<
    [
      subId: BigNumberish,
      subscriber: AddressLike,
      merchant: AddressLike,
      token: AddressLike,
      amount: BigNumberish,
      nextPaymentDue: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pushComm: TypedContractMethod<[], [string], "view">;

  pushEnabled: TypedContractMethod<[], [boolean], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeNotifierRole: TypedContractMethod<
    [notifier: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  sendBulkNotification: TypedContractMethod<
    [recipients: AddressLike[], title: string, body: string],
    [void],
    "nonpayable"
  >;

  sendCustomNotification: TypedContractMethod<
    [recipient: AddressLike, title: string, body: string, metadata: BytesLike],
    [void],
    "nonpayable"
  >;

  setChannel: TypedContractMethod<
    [_channel: AddressLike],
    [void],
    "nonpayable"
  >;

  setPushComm: TypedContractMethod<
    [_pushComm: AddressLike],
    [void],
    "nonpayable"
  >;

  setPushEnabled: TypedContractMethod<[enabled: boolean], [void], "nonpayable">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "NOTIFIER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "channel"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantNotifierRole"
  ): TypedContractMethod<[notifier: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "notifyBeforeRenewal"
  ): TypedContractMethod<
    [
      subId: BigNumberish,
      subscriber: AddressLike,
      merchant: AddressLike,
      amount: BigNumberish,
      nextPaymentDue: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "notifyPaymentFailure"
  ): TypedContractMethod<
    [
      payer: AddressLike,
      payee: AddressLike,
      token: AddressLike,
      amount: BigNumberish,
      paymentRef: string,
      reason: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "notifyPaymentSuccess"
  ): TypedContractMethod<
    [
      payer: AddressLike,
      payee: AddressLike,
      token: AddressLike,
      amount: BigNumberish,
      paymentRef: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "notifySubscriptionCancelled"
  ): TypedContractMethod<
    [subId: BigNumberish, subscriber: AddressLike, merchant: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "notifySubscriptionExecuted"
  ): TypedContractMethod<
    [
      subId: BigNumberish,
      subscriber: AddressLike,
      merchant: AddressLike,
      token: AddressLike,
      amount: BigNumberish,
      nextPaymentDue: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pushComm"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pushEnabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeNotifierRole"
  ): TypedContractMethod<[notifier: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sendBulkNotification"
  ): TypedContractMethod<
    [recipients: AddressLike[], title: string, body: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sendCustomNotification"
  ): TypedContractMethod<
    [recipient: AddressLike, title: string, body: string, metadata: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setChannel"
  ): TypedContractMethod<[_channel: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPushComm"
  ): TypedContractMethod<[_pushComm: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPushEnabled"
  ): TypedContractMethod<[enabled: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "BeforeRenewal"
  ): TypedContractEvent<
    BeforeRenewalEvent.InputTuple,
    BeforeRenewalEvent.OutputTuple,
    BeforeRenewalEvent.OutputObject
  >;
  getEvent(
    key: "CustomNotification"
  ): TypedContractEvent<
    CustomNotificationEvent.InputTuple,
    CustomNotificationEvent.OutputTuple,
    CustomNotificationEvent.OutputObject
  >;
  getEvent(
    key: "NotifierConfigured"
  ): TypedContractEvent<
    NotifierConfiguredEvent.InputTuple,
    NotifierConfiguredEvent.OutputTuple,
    NotifierConfiguredEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PaymentFailure"
  ): TypedContractEvent<
    PaymentFailureEvent.InputTuple,
    PaymentFailureEvent.OutputTuple,
    PaymentFailureEvent.OutputObject
  >;
  getEvent(
    key: "PaymentSuccess"
  ): TypedContractEvent<
    PaymentSuccessEvent.InputTuple,
    PaymentSuccessEvent.OutputTuple,
    PaymentSuccessEvent.OutputObject
  >;
  getEvent(
    key: "PushAttempt"
  ): TypedContractEvent<
    PushAttemptEvent.InputTuple,
    PushAttemptEvent.OutputTuple,
    PushAttemptEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "SubscriptionCancelled"
  ): TypedContractEvent<
    SubscriptionCancelledEvent.InputTuple,
    SubscriptionCancelledEvent.OutputTuple,
    SubscriptionCancelledEvent.OutputObject
  >;
  getEvent(
    key: "SubscriptionExecuted"
  ): TypedContractEvent<
    SubscriptionExecutedEvent.InputTuple,
    SubscriptionExecutedEvent.OutputTuple,
    SubscriptionExecutedEvent.OutputObject
  >;

  filters: {
    "BeforeRenewal(uint256,address,address,uint256,uint256)": TypedContractEvent<
      BeforeRenewalEvent.InputTuple,
      BeforeRenewalEvent.OutputTuple,
      BeforeRenewalEvent.OutputObject
    >;
    BeforeRenewal: TypedContractEvent<
      BeforeRenewalEvent.InputTuple,
      BeforeRenewalEvent.OutputTuple,
      BeforeRenewalEvent.OutputObject
    >;

    "CustomNotification(address,string,string,bytes)": TypedContractEvent<
      CustomNotificationEvent.InputTuple,
      CustomNotificationEvent.OutputTuple,
      CustomNotificationEvent.OutputObject
    >;
    CustomNotification: TypedContractEvent<
      CustomNotificationEvent.InputTuple,
      CustomNotificationEvent.OutputTuple,
      CustomNotificationEvent.OutputObject
    >;

    "NotifierConfigured(address,address,bool)": TypedContractEvent<
      NotifierConfiguredEvent.InputTuple,
      NotifierConfiguredEvent.OutputTuple,
      NotifierConfiguredEvent.OutputObject
    >;
    NotifierConfigured: TypedContractEvent<
      NotifierConfiguredEvent.InputTuple,
      NotifierConfiguredEvent.OutputTuple,
      NotifierConfiguredEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PaymentFailure(address,address,address,uint256,string,string)": TypedContractEvent<
      PaymentFailureEvent.InputTuple,
      PaymentFailureEvent.OutputTuple,
      PaymentFailureEvent.OutputObject
    >;
    PaymentFailure: TypedContractEvent<
      PaymentFailureEvent.InputTuple,
      PaymentFailureEvent.OutputTuple,
      PaymentFailureEvent.OutputObject
    >;

    "PaymentSuccess(address,address,address,uint256,string)": TypedContractEvent<
      PaymentSuccessEvent.InputTuple,
      PaymentSuccessEvent.OutputTuple,
      PaymentSuccessEvent.OutputObject
    >;
    PaymentSuccess: TypedContractEvent<
      PaymentSuccessEvent.InputTuple,
      PaymentSuccessEvent.OutputTuple,
      PaymentSuccessEvent.OutputObject
    >;

    "PushAttempt(address,uint8,bool,bytes)": TypedContractEvent<
      PushAttemptEvent.InputTuple,
      PushAttemptEvent.OutputTuple,
      PushAttemptEvent.OutputObject
    >;
    PushAttempt: TypedContractEvent<
      PushAttemptEvent.InputTuple,
      PushAttemptEvent.OutputTuple,
      PushAttemptEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "SubscriptionCancelled(uint256,address,address)": TypedContractEvent<
      SubscriptionCancelledEvent.InputTuple,
      SubscriptionCancelledEvent.OutputTuple,
      SubscriptionCancelledEvent.OutputObject
    >;
    SubscriptionCancelled: TypedContractEvent<
      SubscriptionCancelledEvent.InputTuple,
      SubscriptionCancelledEvent.OutputTuple,
      SubscriptionCancelledEvent.OutputObject
    >;

    "SubscriptionExecuted(uint256,address,address,address,uint256,uint256)": TypedContractEvent<
      SubscriptionExecutedEvent.InputTuple,
      SubscriptionExecutedEvent.OutputTuple,
      SubscriptionExecutedEvent.OutputObject
    >;
    SubscriptionExecuted: TypedContractEvent<
      SubscriptionExecutedEvent.InputTuple,
      SubscriptionExecutedEvent.OutputTuple,
      SubscriptionExecutedEvent.OutputObject
    >;
  };
}
